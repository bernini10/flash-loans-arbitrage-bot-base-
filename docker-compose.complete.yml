version: '3.8'

services:
  flash-arbitrage-bot:
    build: 
      context: .
      dockerfile: Dockerfile.complete
    container_name: flash-arbitrage-bot-complete
    restart: unless-stopped
    ports:
      - "8081:8081"  # API de monitoramento
    environment:
      # Configurações de conexão
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      
      # Notificações
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      
      # Parâmetros de trading
      - MIN_PROFIT_THRESHOLD=${MIN_PROFIT_THRESHOLD:-0.005}
      - MAX_SLIPPAGE_BPS=${MAX_SLIPPAGE_BPS:-300}
      - MAX_GAS_PRICE_GWEI=${MAX_GAS_PRICE_GWEI:-50}
      
      # Valores de flash loan
      - FLASH_LOAN_AMOUNT_WETH=${FLASH_LOAN_AMOUNT_WETH:-1.0}
      - FLASH_LOAN_AMOUNT_USDC=${FLASH_LOAN_AMOUNT_USDC:-1000.0}
      
      # Timings
      - API_CALL_DELAY=${API_CALL_DELAY:-2}
      - CYCLE_DELAY=${CYCLE_DELAY:-180}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-300}
      
      # Risk management
      - MAX_DAILY_TRADES=${MAX_DAILY_TRADES:-50}
      - MAX_CONSECUTIVE_FAILURES=${MAX_CONSECUTIVE_FAILURES:-5}
      - EMERGENCY_STOP_LOSS_PCT=${EMERGENCY_STOP_LOSS_PCT:-5.0}
      
      # Sistema
      - NODE_ENV=production
      - PYTHONUNBUFFERED=1
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./contracts:/app/contracts
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Serviço de monitoramento Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-arbitrage
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - arbitrage-network
    profiles:
      - monitoring

  # Dashboard Grafana (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-arbitrage
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - arbitrage-network
    profiles:
      - monitoring

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: nginx-arbitrage
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - flash-arbitrage-bot
    networks:
      - arbitrage-network
    profiles:
      - proxy

networks:
  arbitrage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
  grafana-data:
