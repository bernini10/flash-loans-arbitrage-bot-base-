# Dockerfile Completo - Flash Loans Arbitrage Bot
# Multi-stage build otimizado para produção

FROM node:18-alpine AS node-builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

FROM python:3.11-slim as python-builder
# Instalar dependências de build
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Instalar dependências Python
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage final
FROM python:3.11-slim

# Instalar dependências do sistema
RUN apt-get update && apt-get install -y \
    curl \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Instalar Node.js
COPY --from=node-builder /usr/local/bin/node /usr/local/bin/
COPY --from=node-builder /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm

# Copiar dependências Python
COPY --from=python-builder /root/.local /root/.local
ENV PATH=/root/.local/bin:$PATH

# Configurar diretório de trabalho
WORKDIR /app

# Copiar dependências Node.js
COPY --from=node-builder /app/node_modules ./node_modules

# Copiar código fonte
COPY . .

# Criar diretórios necessários
RUN mkdir -p logs data contracts

# Criar usuário não-root para segurança
RUN useradd -m -u 1000 botuser && \
    chown -R botuser:botuser /app && \
    chmod +x deploy_contract.sh

# Configurar variáveis de ambiente
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

# Expor portas
EXPOSE 8081

# Mudar para usuário não-root
USER botuser

# Comando padrão
CMD ["python3", "arbitrage_bot_complete.py"]
